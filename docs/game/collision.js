"use strict";let registeredCollisionObjects={};class Collision{constructor(i,t){this.x=0,this.y=0,this.vx=0,this.vy=0,this.width=i,this.height=t,this.registeredId=registeredCollisionObjects.length,registeredCollisionObjects.push(this)}getPossibleCollisions(i,t,s){let e={},h=[],l=Math.min(1/Math.max(Math.abs(t),Math.abs(s),.001),1);for(let o=0;o<=1+l;o+=l){let l=this.x-this.width/2+t*o,n=this.y-this.height/2+s*o;for(let t=Math.floor(l);t<=Math.ceil(l+this.width);t++)for(let s=Math.floor(n);s<=Math.ceil(n+this.height);s++){let l=Math.ceil(t).toString()+":"+Math.ceil(s).toString();if(void 0!==e[l]){e[l]=!0,"00000000000000000000000000000000"!==i.getTile(Math.ceil(t),Math.ceil(s))&&h.push({x:Math.ceil(t),y:Math.ceil(s),width:1,height:1})}}}for(const[,i]in Object.entries(registeredCollisionObjects))i.registeredId!==this.registeredId&&h.push({x:i.x-i.width/2,y:i.y+i.height/2,width:i.width,height:i.height,dx:i.vx,dy:i.vy});return h}singleFaceCollide(i,t,s,e,h,l,o){let n=!1;if(t>e){let h=t,l=i;t=e,i=s,e=h,s=l,n=!0}if(h>l){let i=h;h=l,l=i}let r=this.width,c=(o-t)/(e-t);if(c<0||c>1)return!1;let x=i*(1-c)+s*c;return!(l<=x||h>=x+r)&&(n?1-c:c)}onePass(i,t){let s=this.x+this.vx*t,e=this.y+this.vy*t,h={collision:!1,newX:s},l={collision:!1,newY:e},o=this.width/2,n=this.height/2,r=this.getPossibleCollisions(i,this.vx*t,this.vy*t);for(const[,i]in Object.entries(r))if(this.vy*t>0){let t=this.singleFaceCollide(this.x-o,this.y+n,s-o,e+n,i.x,i.x+i.width,i.y-i.height);t&&(!l.collision||t<l.linear)&&(l={collision:!0,collider:i,linear:t,newY:i.y-i.height-n})}else if(this.vy*t<0){let t=this.singleFaceCollide(this.x-o,this.y-n,s-o,e-n,i.x,i.x+i.width,i.y);t&&(!l.collision||t<l.linear)&&(l={collision:!0,collider:i,linear:t,newY:i.y+n})}for(const[,i]in Object.entries(r))if(this.vx*t>0){let t=this.singleFaceCollide(this.y-n,this.x+o,e-n,s+o,i.y,i.y-i.height,i.x);t&&(!h.collision||t<h.linear)&&(h={collision:!0,collider:i,linear:t,newX:i.x-o})}else if(this.vx*t<0){let t=this.singleFaceCollide(this.y-n,this.x-o,e-n,s-o,i.y,i.y-i.height,i.x+i.width);t&&(!h.collision||t<h.linear)&&(h={collision:!0,collider:i,linear:t,newX:i.x+i.width+o})}return[h,l]}slide(i,t){let[s,e]=this.onePass(i,t);if(s.collision&&e.collision){let h=this.x,l=this.y,o=this.vx,n=this.vy;this.vy=0,this.y=e.newY,[s]=this.onePass(i,t),this.x=h,this.y=l,this.vx=o,this.vy=n,this.vx=0,this.x=s.newX,[,e]=this.onePass(i,t),this.x=h,this.y=l,this.vx=o,this.vy=n,!e.collision||s.collision&&e.linear>s.linear?(this.y=e.newY,this.x=s.newX,s.collision&&(this.vx=0)):(this.x=s.newX,this.y=e.newY,e.collision&&(this.vy=0))}else e.collision&&(!s.collision||e.linear<s.linear)?(this.vy=0,this.y=e.newY,[s]=this.onePass(i,t),this.x=s.newX,s.collision&&(this.vx=0)):s.collision?(this.vx=0,this.x=s.newX,[,e]=this.onePass(i,t),this.y=e.newY,e.collision&&(this.vy=0)):(this.x=s.newX,this.y=e.newY);return[s.collider,e.collider]}}
